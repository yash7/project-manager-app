/**
 * This class is generated by jOOQ
 */
package org.jooq.ateamcomp354.projectmanagerapp.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.ateamcomp354.projectmanagerapp.DefaultSchema;
import org.jooq.ateamcomp354.projectmanagerapp.Keys;
import org.jooq.ateamcomp354.projectmanagerapp.tables.records.ProjectmembersRecord;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectmembersTable extends TableImpl<ProjectmembersRecord> {

	private static final long serialVersionUID = -1110741723;

	/**
	 * The reference instance of <code>projectMembers</code>
	 */
	public static final ProjectmembersTable PROJECTMEMBERS = new ProjectmembersTable();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ProjectmembersRecord> getRecordType() {
		return ProjectmembersRecord.class;
	}

	/**
	 * The column <code>projectMembers.id</code>.
	 */
	public final TableField<ProjectmembersRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>projectMembers.project_id</code>.
	 */
	public final TableField<ProjectmembersRecord, Integer> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>projectMembers.user_id</code>.
	 */
	public final TableField<ProjectmembersRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>projectMembers</code> table reference
	 */
	public ProjectmembersTable() {
		this("projectMembers", null);
	}

	/**
	 * Create an aliased <code>projectMembers</code> table reference
	 */
	public ProjectmembersTable(String alias) {
		this(alias, PROJECTMEMBERS);
	}

	private ProjectmembersTable(String alias, Table<ProjectmembersRecord> aliased) {
		this(alias, aliased, null);
	}

	private ProjectmembersTable(String alias, Table<ProjectmembersRecord> aliased, Field<?>[] parameters) {
		super(alias, DefaultSchema.DEFAULT_SCHEMA, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ProjectmembersRecord> getPrimaryKey() {
		return Keys.PK_PROJECTMEMBERS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ProjectmembersRecord>> getKeys() {
		return Arrays.<UniqueKey<ProjectmembersRecord>>asList(Keys.PK_PROJECTMEMBERS);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ProjectmembersRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ProjectmembersRecord, ?>>asList(Keys.FK_PROJECTMEMBERS_PROJECT_1, Keys.FK_PROJECTMEMBERS_USERS_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProjectmembersTable as(String alias) {
		return new ProjectmembersTable(alias, this);
	}

	/**
	 * Rename this table
	 */
	public ProjectmembersTable rename(String name) {
		return new ProjectmembersTable(name, null);
	}
}
