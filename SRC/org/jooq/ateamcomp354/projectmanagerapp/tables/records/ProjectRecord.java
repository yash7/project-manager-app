/**
 * This class is generated by jOOQ
 */
package org.jooq.ateamcomp354.projectmanagerapp.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row;
import org.jooq.Row6;
import org.jooq.ateamcomp354.projectmanagerapp.tables.ProjectTable;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectRecord extends UpdatableRecordImpl<ProjectRecord> implements Record6<Integer, String, String, Boolean, Integer, Integer> {

	private static final long serialVersionUID = 1251342010;

	/**
	 * Setter for <code>project.id</code>.
	 */
	public void setId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>project.id</code>.
	 */
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>project.project_name</code>.
	 */
	public void setProjectName(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>project.project_name</code>.
	 */
	public String getProjectName() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>project.description</code>.
	 */
	public void setDescription(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>project.description</code>.
	 */
	public String getDescription() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>project.completed</code>.
	 */
	public void setCompleted(Boolean value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>project.completed</code>.
	 */
	public Boolean getCompleted() {
		return (Boolean) getValue(3);
	}

	/**
	 * Setter for <code>project.budget_at_completion</code>.
	 */
	public void setBudgetAtCompletion(Integer value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>project.budget_at_completion</code>.
	 */
	public Integer getBudgetAtCompletion() {
		return (Integer) getValue(4);
	}
	
	/**
	 * Setter for <code>project.actual_cost</code>.
	 */
	public void setActualCost(Integer value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>project.actual_cost</code>.
	 */
	public Integer getActualCost() {
		return (Integer) getValue(5);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record6 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row6<Integer, String, String, Boolean, Integer, Integer> fieldsRow() {
		return (Row6) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row6<Integer, String, String, Boolean, Integer, Integer> valuesRow() {
		return (Row6) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return ProjectTable.PROJECT.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return ProjectTable.PROJECT.PROJECT_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return ProjectTable.PROJECT.DESCRIPTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Boolean> field4() {
		return ProjectTable.PROJECT.COMPLETED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field5() {
		return ProjectTable.PROJECT.BUDGET_AT_COMPLETION;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field6() {
		return ProjectTable.PROJECT.ACTUAL_COST;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getProjectName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getDescription();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Boolean value4() {
		return getCompleted();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value5() {
		return getBudgetAtCompletion();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value6() {
		return getActualCost();
	}
	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProjectRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProjectRecord value2(String value) {
		setProjectName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProjectRecord value3(String value) {
		setDescription(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProjectRecord value4(Boolean value) {
		setCompleted(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProjectRecord value5(Integer value) {
		setBudgetAtCompletion(value);
		return this;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProjectRecord value6(Integer value) {
		setActualCost(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ProjectRecord values(Integer value1, String value2, String value3, Boolean value4, Integer value5, Integer value6) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ProjectRecord
	 */
	public ProjectRecord() {
		super(ProjectTable.PROJECT);
	}

	/**
	 * Create a detached, initialized ProjectRecord
	 */
	public ProjectRecord(Integer id, String projectName, String description, Boolean completed, Integer budgetAtCompletion, Integer actualCost) {
		super(ProjectTable.PROJECT);

		setValue(0, id);
		setValue(1, projectName);
		setValue(2, description);
		setValue(3, completed);
		setValue(4, budgetAtCompletion);
		setValue(5, actualCost);
	}
}
